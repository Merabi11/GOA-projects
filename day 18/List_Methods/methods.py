#List Methods - ფუნქციები რომლებიც დაგვეხმარება სიებთან სამუშაოდ.


#1: append() - ამ ფუნქციის საშვალებით სიაში შეგვიძლია დავამატოთ ელემენტი ის ამატებს სიის ბოლოში ელემენტს მას მხოლოდ ერთი არგუმენტი გადაეცემა.
numbers_1 = [1, 2, 3, 4,]

numbers_1.append(5) #დაამატებს სიის ბოლოში რიცხვს 5-ს.

print(numbers_1) # [1, 2, 3, 4, 5]



#2: extend() - ამ ფუნქციის საშვალებით ჩვენ შეგვიძლია ორი სია გავაერთიანოდ ერთ სიაში.
numbers_2 = [1, 2, 3, 4]
nums = [5, 6, 7, 8]

numbers_2.extend(nums) #მას გადავჩემთ არგუმენტად იმ სიას რომელი სიაც გვინდა შევიტანოთ შიგნით.

print(numbers_2) # [1, 2, 3, 4,] ეხლა დაიბეჭდება ესე [1, 2, 3, 4, 5, 6, 7, 8] სიაში შევიტანეთ სია და გავაერთიანეთ ერთად.



#3: pop() - ამ ფუნქვიის საშვალებით სიაში შეგვიძლია ამოვშალოთ სასურველი ემენეტი ინსექსის ნომრით არგუმენტად გადავცემთ იმ ელემენტის ინდეს თუ რომელის ამოშლა გვსურს თუ არაფერს არ გადავცემთ ის ავტომატურად შლის ბოლო ემენეტს.
numbers_3 = [1, 2, 3, 4,]

numbers_3.pop() #თუ არაფერს არ გადავცემთ ის ავტომატურად შლის ბოლო ელემენტს.
numbers_3.pop(0) #თუ გვინდა სასურველი ელემენტის ამოშლა სიიდან მას გადავცემთ სასურველი ელემენტის ინდექს ანუ პოზიციის ნომერს.

print(numbers_3) # [2, 3] - ამოიშალა ბოლო ემენეტი და 0-ინდექსზე მყოფი ელემენტი და გამოვიდა [2, 3].



#4: remove() - ამ ფუნქციის საშვალებითაც შეგვიძლია სასურველი ელემენტი წავშალოთ მაგრამ ამჯერად მას ვშლით ელემენტის სახელით.
fruits_4 = ["banana", "mango", "grape", "orange"]

fruits_4.remove("mango") #სიაში რა ელემენტიცაა იმის სახელს გადავცემთ და ის ამოშლის ["mango"] -ს.

print(fruits_4) #["banana", "grape", "orange"] ამოშალა ["mango"]



#5: insert() - ამ ფუნქციის საშვალებით ჩვენ შეგვიძლია დავამატოთ სასურველი ემენეტი სასურველ ადგილას სადაც მოგვინდება.
numbers_5 = [1, 2, 4, 5]

numbers_5.insert(2, 3) #პირველი არგუმენტი იქნება თუ მერამდენე ინდექსზე ჩავსვათ მეორე არგუმენტი იქნება თუ რა ელემენტი ჩავსვათ.

print(numbers_5) #[1, 2, 3, 4, 5] 2-ინდექსზე ჩასვა 3-იანი.



#6: count() - ამ ფუნქციის საშვალებით გავიგებთ სიაში რამდენჯერ მეორდება ერთიდა იგივე ელემენტი.
numbers_6 = [1, 2, 3, 4, 2]

print(numbers_6.count(2)) #ეს ფუნქცია გვეტყვის თუ რამდნჯერ მეორდება ერთიდა იგივე ელემენტი არგუმენტად გადავცემთ იმ ელემენტს რომელიც გვაინტერესებს მეორდება თუ არა.



#7: copy() - ამ ფუნქციის საშვალებით ჩვენ შეგვიძლია ავიღოთ ასლი ნებისმიერი ცვლადის სადაც რამე ინახება.
car_collections = ["mercedes", "porche", "lamborghini", "maclaren"]

new_collection = car_collections.copy() #ახალ ცვლადში შევინახე ზედა ცვლადის ზუსტი ასლი ის დამოუკიდებელი ხდება მასში შეტანილი ნებისმიერი ცვილება არანაირ ზეგავლენას არ მოახდენს მთავარ ცვლადზე საიდანაც გავაკეთეთ ასლი.

new_collection.append("audi") #ის რადგან დამოუკიდებელი ხდება არანაირ ზეგავლენას არ მოახდენს თუ მე რაიმეს დავამატებ ასლში.

print(car_collections) #ეს დაგვიბეჭდავს ["mercedes", "porche", "lamborghini", "maclaren"]
print(new_collection) #ხოლო ეს ["mercedes", "porche", "lamborghini", "maclaren", "audi"]



#8: clear() - ამ ფუნქციის საშვალებით ჩვენ შეგვიძლია სიაში რა ელემენტიც არის ყველა წავშალოთ გავასუფთაოდ.
programing_8 = ["html", "css", "java script", "react", "python"]

programing_8.clear() #მას არგუმენტად არაფერი სჭირდება ის ავტომატურად ყველას წაშლის რაც კი არსებობს სიაში.

print(programing_8) #დაბეჭდავს [] ცალიერ სიას



#9: index() - ამ ფუნქციის საშვალებით ჩვენ შეგვიძლია გავიგოთ თუ რა პოზიციაზე იმყოფება ელემენტი ანუ რა არის მისი ინდექსი ჩვენ ამ ფუნქციის საშვალებითაც შეგვიძლია გადავთვალოთ და გავიგოთ მაგრამ როდესაც არის უამრავი რამ სიაში მას ვერ დავთვლით ის ავტომატურად გვეტყვის მის პიზიციას.
numbers_9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(numbers_9.index(5))



#10: sort() - ამ ფუნქციის საშვალებით ჩვენ შეგვიძლია სიაში მყოფი ელემენთები დავალაგოთ ზრდადობით და კლებადობით შეიძლება ელემენტები სიაში იყოს არეულად და ეს ფუნქცია დაალაგებს ან ზრდადობით ან კლებადიბით გააჩნია რიცხვების სიდიდეს.
numbers_10 = [2, 5, 3, 1, 4] 

numbers_10.sort() #ამ ფუნქციამ დაალაგა ზრდადობით ელემენტები თუ დააკვირდებით არეულად წერია რიცხვები სორტირებამ კი დაალაგა ზუსტად.

print(numbers_10) #[2, 5, 3, 1, 4]-თავიდან ესე იყო მაგრამ სორტირების შემდეგ ესე [1, 2, 3, 4, 5]



#11: reverse() - ამ ფუნქციის საშვალებით ჩვენ შეგვიძლია შებრუნებულად დავითვალოთ რიცხვები.
numbers_11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

numbers_11.reverse() #რევერსმა დაალაგა შებრუნებულად როგორც იგივე საპირისპოროდ რიცხვების დალაგენა

print(numbers_11) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] მაგრამ რევერსული ფუნქცია უკვე ესე დაგვიბრუნებს [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]