// promise - არის (ობიქტი), დაპირება, პრომის ვიყენებთ ასიქრონულ ოპერაციების სამართავად.
// პრიმის გააჩნია სამი მდგომარეობა.

// pending - მომლოდინე რეჟიმშია ოპერავია არც შესრულებულია არც უაყოფილია უბრალოდ გაშვებულია.
// resolved - (fulfill), გაშვებული ოპერაცია წარმატებით შესრულდა.
// rejected - გაშვებული ოპერავია წარუმატებლად შესრულდა ჩაიშალა.

// fetch არის ფუნქცია რომელიც აგზავნის API_ზე ანუ სერვერზე მოთხოვნას ინფორმაციების წამოსაღებად

// Server არის უზარმაზარი ინფორმაციების საცავი სადაც ინახება უამრავი ინფორმაციები ფოტოები, ტქსტები, ვიდეობი, პირადი ინფორმაციები და ასე შემდეგ.
// სერვერი არის იგივე რაც კომპიუტერები რომლებიც ჩართულია 24/7 ზე ის არასდროს ითიშება.

// fetch როდესაც ვიყენებთ ის მიდის სერვერთან და მოაქვს სასურველი ინფორმაცია ამაში გვეხმარება (fetch)

// 2

// შევქმენი პრომისი სადაც მომხამრებელი თუ შეიყვანს 100-ზე მეტ რიცვს ის გაიმარჯვევს სხვა შემთხვევაში დამარცხდება.

const promises = new Promise((resolve, reject) => {
  let userInutNumber = parseInt(prompt('შეიყვანეთ რიცხვი.'));

  if (userInutNumber > 100) {
    resolve('რიცხვი 100-ზე მეტია, გაიმარჯვე.');
  } else {
    reject('სამწუხაროდ რიცხვი 100-ზე ნაკლებია, დამარცხდი.');
  }
});

promises
  .then((res) => {
    console.log(res);
  })
  .catch((rej) => {
    console.log(rej);
  });

// 3

// შევქმენი ასინქრონული ფუქნცია async- მეშვეობით
// fetch-ით გავაგზავნე მოთხოვნა რერვერზე და წამოიღებს მონაცემებს მაგრამ ეს წამოღებული მონაცემები არის ტექსტების სახით ამიტომაც Json() გარდქმნის ჯავასკრიპტის ობიექტად წამოღბულ მონაცემებს

const fetchPromise = async () => {
  try {
    // try ვიყენებთ რადგან მოლოდინი გვქონდეს რაიმე დარრვევა მოხდეს ინფორმაციის წამოღების დროს მაგდროს ვიყენებთ (თრაის)
    const res = await fetch('https://fakestoreapi.com/products'); // await ელოდება მოთხოვნას სანამ სერვერიდან არმოვა პასუხი
    const data = await res.json(); // JSon() სერვერიდან წამოღებულიინფორმაციას ვაქცევთ ობიექტად და ვკრავთ ერთად
    console.log(data);
  } catch (err) {
    // თუ try-ში მოხდა სერვერიდან ინფრომაციის წამოღების დროს რაიმე დარღვევა ამ ყველაფერს იჭერს catch და ამ შეცდომას გამოგვიტანს ეკრანზე თუ რა შეცდომა მოხდა
    console.log(`errors ${err}`);
  }
};

fetchPromise(); // ვიძახებთ აქინქრონულ ფუქნციას
